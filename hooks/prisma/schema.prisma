generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int       @id @default(autoincrement())
  name                        String
  email                       String    @unique
  password                    String
  role                        String    @default("user")
  verificationToken           String?
  isVerified                  Boolean   @default(true)
  verified                    DateTime?
  passwordToken               String?
  passwordTokenExpirationDate DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  Token                       Token[]
  zaps                        Zap[]
  image                       String?
  company                     String?
}

model Token {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  ip           String
  userAgent    String
  isValid      Boolean  @default(true)
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Zap {
  id                 String   @id @default(uuid())
  zapName            String
  availableTriggerId String
  userId             Int
  trigger            Trigger?
  actions            Action[]
  zapRuns            ZapRun[]
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  isActive           Boolean  @default(true)
}

model Trigger {
  id        String           @id @default(uuid())
  zapId     String           @unique
  triggerId String
  metadata  Json             @default("{}")
  type      AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap       Zap              @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model Action {
  id           String          @id @default(uuid())
  zapId        String
  zap          Zap             @relation(fields: [zapId], references: [id], onDelete: Cascade)
  actionId     String
  metadata     Json            @default("{}")
  type         AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int             @default(0)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  image   String?
  actions Action[]
}

model AvailableTrigger {
  id       String    @id @default(uuid())
  name     String
  image    String?
  triggers Trigger[]
}

model ZapRun {
  id           String        @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap           @relation(fields: [zapId], references: [id], onDelete: Cascade)
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id], onDelete: Cascade)
}
